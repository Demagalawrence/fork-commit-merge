# Docker - Hard

# TODO: Create a Docker Compose setup for a microservices architecture
# Requirements:
# 1. Web application service (Node.js/React)
# 2. API service (Node.js/Express)
# 3. Database service (PostgreSQL)
# 4. Cache service (Redis)
# 5. Configure networks, volumes, and health checks
# 6. Set up environment variables
# 7. Implement logging

version: '3.8'

services:
  # Web Application Service
  web:
    build: ./web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://api:4000
    depends_on:
      api:
        condition: service_healthy
    networks:
      - frontend
      - backend
    volumes:
      - web_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build: ./api
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=microservices_db
      - DB_USER=postgres
      - DB_PASSWORD=password123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Service
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=microservices_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password123
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - backend
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web
      - api
    networks:
      - frontend
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  web_logs:
  api_logs: 